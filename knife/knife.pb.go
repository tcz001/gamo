// Code generated by protoc-gen-go.
// source: knife.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	knife.proto

It has these top-level messages:
	Knife
*/
package knife

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type Knife_FrameType int32

const (
	Knife_Message    Knife_FrameType = 0
	Knife_Register   Knife_FrameType = 1
	Knife_Unregister Knife_FrameType = 2
	Knife_Kick       Knife_FrameType = 3
	Knife_Ping       Knife_FrameType = 4
)

var Knife_FrameType_name = map[int32]string{
	0: "Message",
	1: "Register",
	2: "Unregister",
	3: "Kick",
	4: "Ping",
}
var Knife_FrameType_value = map[string]int32{
	"Message":    0,
	"Register":   1,
	"Unregister": 2,
	"Kick":       3,
	"Ping":       4,
}

func (x Knife_FrameType) String() string {
	return proto1.EnumName(Knife_FrameType_name, int32(x))
}

type Knife struct {
}

func (m *Knife) Reset()         { *m = Knife{} }
func (m *Knife) String() string { return proto1.CompactTextString(m) }
func (*Knife) ProtoMessage()    {}

type Knife_Frame struct {
	Type    Knife_FrameType `protobuf:"varint,1,opt,enum=proto.Knife_FrameType" json:"Type,omitempty"`
	Message []byte          `protobuf:"bytes,2,opt,proto3" json:"Message,omitempty"`
	UserId  int32           `protobuf:"varint,3,opt" json:"UserId,omitempty"`
}

func (m *Knife_Frame) Reset()         { *m = Knife_Frame{} }
func (m *Knife_Frame) String() string { return proto1.CompactTextString(m) }
func (*Knife_Frame) ProtoMessage()    {}

func init() {
	proto1.RegisterEnum("proto.Knife_FrameType", Knife_FrameType_name, Knife_FrameType_value)
}

// Client API for KnifeService service

type KnifeServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (KnifeService_StreamClient, error)
}

type knifeServiceClient struct {
	cc *grpc.ClientConn
}

func NewKnifeServiceClient(cc *grpc.ClientConn) KnifeServiceClient {
	return &knifeServiceClient{cc}
}

func (c *knifeServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (KnifeService_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_KnifeService_serviceDesc.Streams[0], c.cc, "/proto.KnifeService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &knifeServiceStreamClient{stream}
	return x, nil
}

type KnifeService_StreamClient interface {
	Send(*Knife_Frame) error
	Recv() (*Knife_Frame, error)
	grpc.ClientStream
}

type knifeServiceStreamClient struct {
	grpc.ClientStream
}

func (x *knifeServiceStreamClient) Send(m *Knife_Frame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *knifeServiceStreamClient) Recv() (*Knife_Frame, error) {
	m := new(Knife_Frame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for KnifeService service

type KnifeServiceServer interface {
	Stream(KnifeService_StreamServer) error
}

func RegisterKnifeServiceServer(s *grpc.Server, srv KnifeServiceServer) {
	s.RegisterService(&_KnifeService_serviceDesc, srv)
}

func _KnifeService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KnifeServiceServer).Stream(&knifeServiceStreamServer{stream})
}

type KnifeService_StreamServer interface {
	Send(*Knife_Frame) error
	Recv() (*Knife_Frame, error)
	grpc.ServerStream
}

type knifeServiceStreamServer struct {
	grpc.ServerStream
}

func (x *knifeServiceStreamServer) Send(m *Knife_Frame) error {
	return x.ServerStream.SendMsg(m)
}

func (x *knifeServiceStreamServer) Recv() (*Knife_Frame, error) {
	m := new(Knife_Frame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _KnifeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.KnifeService",
	HandlerType: (*KnifeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _KnifeService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}
